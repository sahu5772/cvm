.container {
  position: relative;
}


.container,
.container-fluid,
.grid_container {
  width: 100%;
  padding-right: var(1.5rem, .75rem);
  padding-left: var(1.5rem, .75rem);
  margin-right: auto;
  margin-left: auto
}

@media (min-width:576px) {

  .container,
  .grid_container {
    max-width: 540px
  }
}

@media (min-width:768px) {

  .container,
  .grid_container {
    max-width: 720px
  }
}

@media (min-width:992px) {

  .container,
  .grid_container {
    max-width: 960px
  }
}

@media (min-width:1200px) {

  .container,
  .grid_container {
    max-width: 1140px
  }
}

@media (min-width:1440px) {

  .container,
  .grid_container {
    max-width: 1300px
  }
}

@media (min-width:1600px) {

  .container,
  .grid_container {
    max-width: 1440px
  }
}

@media (min-width:1920px) {

  .container,
  .grid_container {
    max-width: 1580px
  }
}



$columns: 12;
$gap: 30px;
$breakpoints: (
  xs: 480px,
  sm: 768px,
  md: 960px,
  lg: 1170px,
  xl: 1280px
);

@mixin create-selectors($breakpoint: null) {
  $infix: if($breakpoint ==null, '', '-#{$breakpoint}');

  @for $i from 1 through $columns {
    .col#{$infix}-#{$i} {
      grid-column-end: span $i;
    }

    .col-offset#{$infix}-#{$i} {
      grid-column-start: $i + 1;
    }

    .row#{$infix}-#{$i} {
      grid-row-end: span $i;
    }

    .row-offset#{$infix}-#{$i} {
      grid-row-start: $i + 1;
    }
  }
}

.grid {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-gap: $gap;
  gap: clamp(15px, 2vw, $gap);
}

@include create-selectors;

@each $breakpoint,
$width in $breakpoints {
  @media (min-width: $width) {
    @include create-selectors($breakpoint);
  }
}

// ===================

@mixin d-flex() {
  display: flex;
}

@mixin align-center() {
  align-items: center;
}

@mixin justify-center() {
  justify-content: center;
}

@mixin justify-space-between() {
  justify-content: space-between;
}



// ============= Basic css setting


img,
video {
  display: block;
  max-width: 100%;
}

img {
  display: block;
  user-drag: none;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-drag: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}

ul {
  list-style: none;
}

/* extra long transition to hide blue autofill background */
input:-webkit-autofill,
input:-webkit-autofill:focus,
textarea:-webkit-autofill,
textarea:-webkit-autofill:focus {
  -webkit-transition: background-color 100000000000000000000000000000s 0s, color 100000000000000000000000000000s 0s;
  transition: background-color 100000000000000000000000000000s 0s, color 100000000000000000000000000000s 0s;
}

/* Remove Safari autofill*/
input::-webkit-contacts-auto-fill-button {
  visibility: hidden;
  display: none !important;
  pointer-events: none;
  position: absolute;
  right: 0;
}

input,
textarea {
  /* remove autofill blue background */
  box-shadow: inset 0 0 0 150px rgba(255, 255, 255, 0) !important;
  -webkit-box-shadow: inset 0 0 0 150px rgba(255, 255, 255, 0) !important;
  -webkit-text-fill-color: currentColor !important;
  font-family: 'Manrope', sans-serif;
  font-weight: 500;
  font-size: 1.4rem;
  background-color: transparent;

  &:focus-visible {
    outline: none;
  }
}

input[type=number] {
  -moz-appearance: textfield;
}

a {
  text-decoration: none;

  &:hover {
    text-decoration: none;
  }

  &:active {
    background-color: transparent !important;
  }
}